-- Simple daily KPIs for Tableau using session + session_params + order + product
-- Dataset: data-analytics-mate.DA
WITH
params AS (
  SELECT DATE('2024-01-01') AS start_date, DATE('2024-12-31') AS end_date
),

-- pivot session_params into one row per session
session_params_pivot AS (
  SELECT
    ga_session_id AS session_id,
    MAX(device)    AS device,
    MAX(channel)   AS channel,
    MAX(country)   AS country,
    MAX(continent) AS continent
  FROM `data-analytics-mate.DA.session_params`
  GROUP BY ga_session_id
),

-- join order -> product to get price; assume 1 per order row
order_with_price AS (
  SELECT
    o.ga_session_id AS session_id,
    o.item_id AS item_id,
    SAFE_CAST(p.price AS NUMERIC) AS item_price
  FROM `data-analytics-mate.DA.order` o
  LEFT JOIN `data-analytics-mate.DA.product` p
    ON o.item_id = p.item_id
),

-- aggregate sales per session (sum item_price, count order rows)
orders_by_session AS (
  SELECT
    session_id,
    SUM(COALESCE(item_price,0)) AS session_sales,
    COUNT(1) AS order_rows,
    COUNT(DISTINCT CASE WHEN item_price IS NOT NULL THEN item_id END) AS distinct_items_ordered
  FROM order_with_price
  GROUP BY session_id
),

-- sessions + params + orders
session_enriched AS (
  SELECT
    s.ga_session_id AS session_id,
    DATE(s.`date`) AS session_date,
    COALESCE(sp.device,'Unknown') AS device,
    COALESCE(sp.channel,'Other') AS channel,
    COALESCE(sp.country,'Unknown') AS country,
    COALESCE(sp.continent,'Unknown') AS continent,
    COALESCE(o.session_sales, 0) AS session_sales,
    COALESCE(o.order_rows, 0) AS order_rows,
    COALESCE(o.distinct_items_ordered, 0) AS distinct_items_ordered
  FROM `data-analytics-mate.DA.session` s
  LEFT JOIN session_params_pivot sp
    ON sp.session_id = s.ga_session_id
  LEFT JOIN orders_by_session o
    ON o.session_id = s.ga_session_id
  JOIN params p ON TRUE
  WHERE DATE(s.`date`) BETWEEN p.start_date AND p.end_date
),

calendar AS (
  SELECT day AS date FROM params, UNNEST(GENERATE_DATE_ARRAY(params.start_date, params.end_date)) AS day
)

SELECT
  c.date,
  COUNT(DISTINCT se.session_id) AS sessions,
  SUM(se.session_sales) AS total_sales,
  SUM(CASE WHEN se.session_sales > 0 THEN 1 ELSE 0 END) AS sessions_with_orders,
  SAFE_DIVIDE(SUM(se.session_sales), NULLIF(SUM(CASE WHEN se.session_sales > 0 THEN 1 ELSE 0 END),0)) AS aov_per_order_session,
  SAFE_DIVIDE(SUM(se.session_sales), NULLIF(COUNT(DISTINCT se.session_id),0)) AS avg_sales_per_session,

  SUM(CASE WHEN LOWER(se.device) LIKE '%desktop%' THEN se.session_sales ELSE 0 END) AS device_desktop_sales,
  SUM(CASE WHEN LOWER(se.device) LIKE '%mobile%'  THEN se.session_sales ELSE 0 END) AS device_mobile_sales,
  SUM(CASE WHEN LOWER(se.device) LIKE '%tablet%'  THEN se.session_sales ELSE 0 END) AS device_tablet_sales,
  SUM(CASE WHEN LOWER(se.device) NOT LIKE '%desktop%' AND LOWER(se.device) NOT LIKE '%mobile%' AND LOWER(se.device) NOT LIKE '%tablet%' THEN se.session_sales ELSE 0 END) AS device_other_sales,

  SUM(CASE WHEN LOWER(se.channel) LIKE '%organic%' THEN se.session_sales ELSE 0 END) AS channel_organic_sales,
  SUM(CASE WHEN LOWER(se.channel) LIKE '%paid%'    THEN se.session_sales ELSE 0 END) AS channel_paid_sales,
  SUM(CASE WHEN LOWER(se.channel) LIKE '%referral%' THEN se.session_sales ELSE 0 END) AS channel_referral_sales,
  SUM(CASE WHEN LOWER(se.channel) LIKE '%social%'   THEN se.session_sales ELSE 0 END) AS channel_social_sales,
  SUM(CASE WHEN LOWER(se.channel) LIKE '%direct%'   THEN se.session_sales ELSE 0 END) AS channel_direct_sales,
  SUM(CASE WHEN LOWER(se.channel) NOT LIKE '%organic%' AND LOWER(se.channel) NOT LIKE '%paid%' AND LOWER(se.channel) NOT LIKE '%referral%' AND LOWER(se.channel) NOT LIKE '%social%' AND LOWER(se.channel) NOT LIKE '%direct%' THEN se.session_sales ELSE 0 END) AS channel_other_sales

FROM calendar c
LEFT JOIN session_enriched se
  ON se.session_date = c.date
GROUP BY c.date
ORDER BY c.date;
